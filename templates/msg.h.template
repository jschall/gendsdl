/* Auto-generated from file @file_name_in */

@{
import genmsg.msgs
from math import ceil, pow
from numpy import log2
from canard_printer_funcs import *
canard_name = '%s'%spec.short_name
topic_name = spec.short_name
TOPIC_NAME = spec.short_name.upper()
offset = 0
ind = '    '
}@

#pragma once

#include <stdint.h>
#include <float16.h>
#include <string.h>
@[for dependency in spec.depends]@
#include <@(dependency).h>
@[end for]
@[for constant in spec.constants]@
#define @(TOPIC_NAME)_@(constant.name) @(int(constant.val))
@[end for]
@[if spec.type == 'struct']@
#define @(TOPIC_NAME)_MAX_PACK_SIZE @(int(ceil(float(spec.max_bit_len)/8.0)))
#define @(TOPIC_NAME)_MIN_PACK_SIZE @(int(ceil(float(spec.min_bit_len)/8.0)))
@[else]@
#define @(TOPIC_NAME)_MAX_PACK_SIZE @(max([field.bit_size for field in spec.parsed_fields()]))
@[end if]@
#define @(TOPIC_NAME)_DT_SIG @('0x%016XULL' % (spec.signature,))
@[if spec.id is not None]@
#define @(TOPIC_NAME)_DT_ID @(spec.id)
@[end if]@

@[if spec.type == 'union']@
enum @(canard_name)_type {
@[  for field in filter(lambda f: not f.is_header, spec.parsed_fields())]@
    @(canard_name.upper())_@(field.name.upper()),
@[  end for]@
};
@[end if]@

typedef struct @(canard_name) @(canard_name);

#ifdef __cplusplus
struct __EXPORT @(canard_name) {
#else
struct @(canard_name) {
#endif

@[if spec.type == 'union']@
    @(canard_name)_type tag;
    union {
@[end if]@
@[if len(spec.parsed_fields()) == 0]@
    uint8_t empty;
@[end if]@
@[for field in filter(lambda f: not f.is_header, spec.parsed_fields())]@
@{  print_field_def(2 if spec.type == 'union' else 1, ind, spec, field)}@
@[end for]@
@[if spec.type == 'union']@
    };
@[end if]@
};


void _encode_@(canard_name)(uint8_t buffer[], uint32_t *bit_ofs, @(canard_name) *msg, bool tao_mode)
{
@{
print """
    (void)buffer;
    (void)bit_ofs;
    (void)msg;
    (void)tao_mode;
"""
if spec.type == "struct":
    print_field_encode_decode_struct(spec, spec.parsed_fields(), True)
else:
    print_field_encode_decode_union(spec, spec.parsed_fields(), True)
}@
}

uint32_t encode_@(canard_name)(uint8_t buffer[], @(canard_name) *msg)
{
    uint32_t bit_ofs = 0;
    memset(buffer, 0, @(canard_name.upper())_MAX_PACK_SIZE);
    _encode_@(canard_name)(buffer, &bit_ofs, msg, true);
    return (bit_ofs+7)/8;
}

void _decode_@(canard_name)(const CanardRxTransfer* transfer, uint32_t *bit_ofs, @(canard_name) *msg, bool tao_mode)
{
@{
print """
    //in case we don\'t use these
    (void)transfer;
    (void)bit_ofs;
    (void)msg;
    (void)tao_mode;
"""
if spec.type == "struct":
    print_field_encode_decode_struct(spec, spec.parsed_fields(), False)
else:
    print_field_encode_decode_union(spec, spec.parsed_fields(), False)
}@
}

uint32_t decode_@(canard_name)(const CanardRxTransfer* transfer, @(canard_name) *msg)
{
    uint32_t bit_ofs = 0;
    _decode_@(canard_name)(transfer, &bit_ofs, msg, true);
    return (bit_ofs+7)/8;
}
